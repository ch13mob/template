def renameConfig = [
        newProjectName           : "Your Project Name", // Define the app's new name in the "${rootDir}/app/src/main/res/values/strings.xml"
        newRootProjectName       : "YourProjectName",   // Define the rootProject.name in the "${rootDir}/settings.gradle.kts"
        newMaterialThemeName     : "YourMaterialTheme", // Define the new MaterialTheme name in the app
        newApplicationId         : "domain.yourname.app",  // Define the new applicationId, namespace, package names and imports in the app
        newDeeplinkHost          : "yourname.domain", // Define the new deeplink host in the app

        // Don't change these unless you know what you're doing.
        templateProjectName      : "Template app",
        templateRootProjectName  : "Template",
        templateMaterialThemeName: "TemplateTheme",
        templateApplicationId    : "template",
        templateDeeplinkHost     : "template.com",
]

tasks.register('deleteSetupCode') {
    def buildscriptsFolder = "${rootDir}/buildscripts"
    def setupGradle = "$buildscriptsFolder/setup.gradle"
    def renovateFile = "${rootDir}/renovate.json"

    doLast {
        removeTextFromFile("${rootDir}/build.gradle.kts", "setup.gradle")
        delete(setupGradle)
        delete(renovateFile)
        delete(buildscriptsFolder)
    }
}

tasks.register('renameAppPackage', Copy) {
    description "Renames the template package in the app module."
    group null

    def newPackageAsDirectory = renameConfig.newApplicationId.replaceAll("\\.", "/")
    def startingDirectory = "${rootDir}/app/src/main/kotlin/${renameConfig.templateApplicationId.replaceAll("\\.", "/")}"
    def endingDirectory = "${rootDir}/app/src/main/kotlin/${newPackageAsDirectory}"

    from(startingDirectory)
    into(endingDirectory)

    // Replace package statements
    filter { line ->
        line.replaceAll(
                "package ${renameConfig.templateApplicationId}",
                "package ${renameConfig.newApplicationId}"
        )
    }

    // Replace import statements
    filter { line ->
        line.replaceAll(
                "import ${renameConfig.templateApplicationId}",
                "import ${renameConfig.newApplicationId}"
        )
    }

    // Replace Theme references. We can just replace on name,
    // which covers both imports and function calls.
    filter { line ->
        line.replaceAll(
                "${renameConfig.templateMaterialThemeName}",
                "${renameConfig.newMaterialThemeName}"
        )
    }

    doLast {
        delete(startingDirectory)
    }
}

tasks.register('replaceTemplateReferences') {
    description "Replaces references to template in various files."
    group null

    doLast {
        replaceTextInFile(
                "${rootDir}/app/src/main/AndroidManifest.xml",
                "${renameConfig.templateDeeplinkHost}",
                "${renameConfig.newDeeplinkHost}",
        )

        replaceTextInFile(
                "${rootDir}/app/build.gradle.kts",
                "namespace = \"${renameConfig.templateApplicationId}\"",
                "namespace = \"${renameConfig.newApplicationId}\"",
        )

        replaceTextInFile(
                "${rootDir}/app/build.gradle.kts",
                "applicationId = \"${renameConfig.templateApplicationId}\"",
                "applicationId = \"${renameConfig.newApplicationId}\"",
        )

        replaceTextInFile(
                "${rootDir}/settings.gradle.kts",
                "rootProject.name = \"${renameConfig.templateRootProjectName}\"",
                "rootProject.name = \"${renameConfig.newRootProjectName}\"",
        )

        replaceTextInFile(
                "${rootDir}/app/src/main/res/values/strings.xml",
                "<string name=\"app_name\">${renameConfig.templateProjectName}</string>",
                "<string name=\"app_name\">${renameConfig.newProjectName}</string>",
        )
    }
}

tasks.register('renameTemplate') {
    description "Runs all of the necessary template setup tasks based on the renameConfig."
    group "Template Setup"

    dependsOn(
            renameAppPackage,
            replaceTemplateReferences,
            deleteSetupCode,
    )
}

/**
 * Replaces all instances of [text] in a given [fileName].
 */
static def replaceTextInFile(fileName, originalText, newText) {
    def file = new File(fileName)

    file.text = file.text.replaceAll(originalText, newText)
}

/**
 * Removes all lines from the given fileName that contain some supplied text.
 */
static def removeTextFromFile(fileName, text) {
    def file = new File(fileName)
    List fileLines = file.readLines()
    file.text = ""
    fileLines.each { line ->
        if (!line.contains(text)) {
            file.append(line)
            file.append("\n")
        }
    }
}
